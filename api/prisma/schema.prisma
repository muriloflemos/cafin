// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  nome         String         @db.VarChar(100)
  senha        String         @db.VarChar(100)
  roles        UsuarioRoles[]
  evolucoes    Evolucao[]
  notificacoes Notificacao[]

  @@map("usuario")
}

model UsuarioRoles {
  id        Int     @id @default(autoincrement())
  usuarioId Int
  role      String  @db.VarChar(100)
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  @@map("usuario_roles")
}

model Cliente {
  id                          Int        @id @default(autoincrement())
  nome                        String     @db.VarChar(200)
  telefone                    String?    @db.VarChar(30)
  endereco                    String?    @db.VarChar(200)
  estadoCivil                 String?    @db.VarChar(50)
  filhos                      Int?
  email                       String?    @db.VarChar(200)
  dataNascimento              DateTime?  @db.Date()
  cpf                         String?    @db.VarChar(20)
  rg                          String?    @db.VarChar(200)
  diagnosticoClinico          String?    @db.LongText
  diagnosticoFisioterapeutico String?    @db.LongText
  contadorEvolucoes           Int?
  createdAt                   DateTime   @default(now())
  updatedAt                   DateTime   @default(now()) @updatedAt
  Evolucao                    Evolucao[]

  @@map("cliente")
}

model Evolucao {
  id        Int       @id @default(autoincrement())
  data      DateTime  @db.DateTime()
  descricao String?   @db.LongText
  clienteId Int
  usuarioId Int
  cliente   Cliente   @relation(fields: [clienteId], references: [id])
  usuario   Usuario   @relation(fields: [usuarioId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@map("evolucao")
}

model Notificacao {
  id        Int       @id @default(autoincrement()) 
  tipo      String    @db.VarChar(100)
  visto     Boolean
  descricao String?   @db.VarChar(200)
  conteudo  Json?
  createdAt DateTime  @default(now())
  usuarioId Int?
  usuario   Usuario?  @relation(fields: [usuarioId], references: [id])

  @@map("notificacao")
}
